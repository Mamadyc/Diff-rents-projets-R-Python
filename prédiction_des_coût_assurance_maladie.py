# -*- coding: utf-8 -*-
"""Prédiction des coût assurance maladie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y2h9w7V02n8zKH_g4hkOdNqppcWMQVG4

## PREDICTION DES FRAIS D'ASSURANCE MALADIE
"""

# Importation des librairies
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt

"""Importation des données"""

import pandas as pd

## importation $ exploration des données
mc= pd.read_csv("/content/medical_insurance.csv")
mc.head()

# répresentation des fumeurs ou non en fonction du sex
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['smoker'].value_counts()
    for x_label, grp in mc.groupby('sex')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('sex')
_ = plt.ylabel('smoker')

mc.describe()

print(mc)



#vérification des valeurs marquantes
missing_values = mc.apply(lambda x: x.isnull().sum())

# Afficher le nombre de valeurs manquantes dans chaque colonne
print("Nombre de valeurs manquantes dans chaque colonne :")
print(missing_values)

# créer des colonnes 'sex', 'smoker' et 'region' pour des variables catégorielle
mcd = pd.get_dummies(mc[['sex', 'smoker', 'region']])

# Joindre les colonnes dummies avec le DataFrame original
mdd = mc.join(mcd)

# Afficher le DataFrame résultant
print(mdd)

# Supprimer les colonnes 'sex', 'smoker' et 'region' du DataFrame mcd
mdd.drop(columns=['sex', 'smoker', 'region'], inplace=True)

print(mdd)

mdd.head()

print(mdd)

"""# Les modèles"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
# Division des données
X = mdd.drop(columns=["charges"])
y = mdd["charges"]

# Division des  données en ensembles d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# les modèles
models = {
    "Régression linéaire": LinearRegression(),
    "SVM": SVR(),
    "Arbre de décision": DecisionTreeRegressor()
}

# Entraîner et évaluer chaque modèle
for name, model in models.items():
    # Entraîner le modèle
    model.fit(X_train, y_train)

    # prédictions sur l'ensemble de test
    predictions = model.predict(X_test)

    # Calcul l'erreur quadratique moyenne (MSE)
    mse = mean_squared_error(y_test, predictions)

    # Afficher les performances du modèle
    print(f"Modèle: {name}")
    print(f"MSE: {mse}")
    print("-----------------------------------------")

import matplotlib.pyplot as plt

# pour visualiser les prédictions par rapport aux valeurs réelles
plt.figure(figsize=(10, 6))
for name, predictions in model_predictions.items():
    plt.scatter(y_test, predictions, label=name, alpha=0.7)

plt.xlabel("Valeurs réelles")
plt.ylabel("Prédictions")
plt.title("Comparaison des prédictions des modèles")
plt.legend()
plt.show()